# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_foo_swig', [dirname(__file__)])
        except ImportError:
            import _foo_swig
            return _foo_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_foo_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _foo_swig = swig_import_helper()
    del swig_import_helper
else:
    import _foo_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _foo_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _foo_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _foo_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _foo_swig.high_res_timer_epoch()
class burst_tagger(object):
    """Proxy of C++ gr::foo::burst_tagger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(tag_name, mult):
        """make(swig_int_ptr tag_name, unsigned int mult) -> burst_tagger_sptr"""
        return _foo_swig.burst_tagger_make(tag_name, mult)

    make = staticmethod(make)
    __swig_destroy__ = _foo_swig.delete_burst_tagger
    __del__ = lambda self: None
burst_tagger_swigregister = _foo_swig.burst_tagger_swigregister
burst_tagger_swigregister(burst_tagger)

def burst_tagger_make(tag_name, mult):
    """burst_tagger_make(swig_int_ptr tag_name, unsigned int mult) -> burst_tagger_sptr"""
    return _foo_swig.burst_tagger_make(tag_name, mult)

class packet_dropper(object):
    """Proxy of C++ gr::foo::packet_dropper class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(drop_rate, seed):
        """make(double drop_rate, unsigned long seed) -> packet_dropper_sptr"""
        return _foo_swig.packet_dropper_make(drop_rate, seed)

    make = staticmethod(make)
    __swig_destroy__ = _foo_swig.delete_packet_dropper
    __del__ = lambda self: None
packet_dropper_swigregister = _foo_swig.packet_dropper_swigregister
packet_dropper_swigregister(packet_dropper)

def packet_dropper_make(drop_rate, seed):
    """packet_dropper_make(double drop_rate, unsigned long seed) -> packet_dropper_sptr"""
    return _foo_swig.packet_dropper_make(drop_rate, seed)

class packet_pad(object):
    """Proxy of C++ gr::foo::packet_pad class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0):
        """make(bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0) -> packet_pad_sptr"""
        return _foo_swig.packet_pad_make(debug, delay, delay_sec, pad_front, pad_tail)

    make = staticmethod(make)
    __swig_destroy__ = _foo_swig.delete_packet_pad
    __del__ = lambda self: None
packet_pad_swigregister = _foo_swig.packet_pad_swigregister
packet_pad_swigregister(packet_pad)

def packet_pad_make(debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0):
    """packet_pad_make(bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0) -> packet_pad_sptr"""
    return _foo_swig.packet_pad_make(debug, delay, delay_sec, pad_front, pad_tail)

class packet_pad2(object):
    """Proxy of C++ gr::foo::packet_pad2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0):
        """make(bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0) -> packet_pad2_sptr"""
        return _foo_swig.packet_pad2_make(debug, delay, delay_sec, pad_front, pad_tail)

    make = staticmethod(make)
    __swig_destroy__ = _foo_swig.delete_packet_pad2
    __del__ = lambda self: None
packet_pad2_swigregister = _foo_swig.packet_pad2_swigregister
packet_pad2_swigregister(packet_pad2)

def packet_pad2_make(debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0):
    """packet_pad2_make(bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0) -> packet_pad2_sptr"""
    return _foo_swig.packet_pad2_make(debug, delay, delay_sec, pad_front, pad_tail)

class periodic_msg_source(object):
    """Proxy of C++ gr::foo::periodic_msg_source class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(msg, interval, num_msg=-1, quit=True, debug=False):
        """make(swig_int_ptr msg, long interval, int num_msg=-1, bool quit=True, bool debug=False) -> periodic_msg_source_sptr"""
        return _foo_swig.periodic_msg_source_make(msg, interval, num_msg, quit, debug)

    make = staticmethod(make)

    def set_nmsg(self, nmsg):
        """set_nmsg(periodic_msg_source self, int nmsg)"""
        return _foo_swig.periodic_msg_source_set_nmsg(self, nmsg)


    def get_nmsg(self):
        """get_nmsg(periodic_msg_source self) -> int"""
        return _foo_swig.periodic_msg_source_get_nmsg(self)


    def set_delay(self, delay):
        """set_delay(periodic_msg_source self, long delay)"""
        return _foo_swig.periodic_msg_source_set_delay(self, delay)


    def get_delay(self):
        """get_delay(periodic_msg_source self) -> long"""
        return _foo_swig.periodic_msg_source_get_delay(self)


    def start_tx(self):
        """start_tx(periodic_msg_source self)"""
        return _foo_swig.periodic_msg_source_start_tx(self)


    def stop_tx(self):
        """stop_tx(periodic_msg_source self)"""
        return _foo_swig.periodic_msg_source_stop_tx(self)


    def is_running(self):
        """is_running(periodic_msg_source self) -> bool"""
        return _foo_swig.periodic_msg_source_is_running(self)

    __swig_destroy__ = _foo_swig.delete_periodic_msg_source
    __del__ = lambda self: None
periodic_msg_source_swigregister = _foo_swig.periodic_msg_source_swigregister
periodic_msg_source_swigregister(periodic_msg_source)

def periodic_msg_source_make(msg, interval, num_msg=-1, quit=True, debug=False):
    """periodic_msg_source_make(swig_int_ptr msg, long interval, int num_msg=-1, bool quit=True, bool debug=False) -> periodic_msg_source_sptr"""
    return _foo_swig.periodic_msg_source_make(msg, interval, num_msg, quit, debug)

class random_periodic_msg_source(object):
    """Proxy of C++ gr::foo::random_periodic_msg_source class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(msg_len, interval, num_msg=1, quit=True, debug=False, seed=0):
        """make(int msg_len, long interval, int num_msg=1, bool quit=True, bool debug=False, int seed=0) -> random_periodic_msg_source_sptr"""
        return _foo_swig.random_periodic_msg_source_make(msg_len, interval, num_msg, quit, debug, seed)

    make = staticmethod(make)

    def set_nmsg(self, nmsg):
        """set_nmsg(random_periodic_msg_source self, int nmsg)"""
        return _foo_swig.random_periodic_msg_source_set_nmsg(self, nmsg)


    def get_nmsg(self):
        """get_nmsg(random_periodic_msg_source self) -> int"""
        return _foo_swig.random_periodic_msg_source_get_nmsg(self)


    def set_delay(self, delay):
        """set_delay(random_periodic_msg_source self, long delay)"""
        return _foo_swig.random_periodic_msg_source_set_delay(self, delay)


    def get_delay(self):
        """get_delay(random_periodic_msg_source self) -> long"""
        return _foo_swig.random_periodic_msg_source_get_delay(self)


    def start_tx(self):
        """start_tx(random_periodic_msg_source self)"""
        return _foo_swig.random_periodic_msg_source_start_tx(self)


    def stop_tx(self):
        """stop_tx(random_periodic_msg_source self)"""
        return _foo_swig.random_periodic_msg_source_stop_tx(self)


    def is_running(self):
        """is_running(random_periodic_msg_source self) -> bool"""
        return _foo_swig.random_periodic_msg_source_is_running(self)

    __swig_destroy__ = _foo_swig.delete_random_periodic_msg_source
    __del__ = lambda self: None
random_periodic_msg_source_swigregister = _foo_swig.random_periodic_msg_source_swigregister
random_periodic_msg_source_swigregister(random_periodic_msg_source)

def random_periodic_msg_source_make(msg_len, interval, num_msg=1, quit=True, debug=False, seed=0):
    """random_periodic_msg_source_make(int msg_len, long interval, int num_msg=1, bool quit=True, bool debug=False, int seed=0) -> random_periodic_msg_source_sptr"""
    return _foo_swig.random_periodic_msg_source_make(msg_len, interval, num_msg, quit, debug, seed)

class rtt_measure(object):
    """Proxy of C++ gr::foo::rtt_measure class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(interval):
        """make(unsigned long interval) -> rtt_measure_sptr"""
        return _foo_swig.rtt_measure_make(interval)

    make = staticmethod(make)
    __swig_destroy__ = _foo_swig.delete_rtt_measure
    __del__ = lambda self: None
rtt_measure_swigregister = _foo_swig.rtt_measure_swigregister
rtt_measure_swigregister(rtt_measure)

def rtt_measure_make(interval):
    """rtt_measure_make(unsigned long interval) -> rtt_measure_sptr"""
    return _foo_swig.rtt_measure_make(interval)


_foo_swig.WIFI_swigconstant(_foo_swig)
WIFI = _foo_swig.WIFI

_foo_swig.ZIGBEE_swigconstant(_foo_swig)
ZIGBEE = _foo_swig.ZIGBEE
class wireshark_connector(object):
    """Proxy of C++ gr::foo::wireshark_connector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(type, debug=False):
        """make(gr::foo::LinkType type, bool debug=False) -> wireshark_connector_sptr"""
        return _foo_swig.wireshark_connector_make(type, debug)

    make = staticmethod(make)
    __swig_destroy__ = _foo_swig.delete_wireshark_connector
    __del__ = lambda self: None
wireshark_connector_swigregister = _foo_swig.wireshark_connector_swigregister
wireshark_connector_swigregister(wireshark_connector)

def wireshark_connector_make(type, debug=False):
    """wireshark_connector_make(gr::foo::LinkType type, bool debug=False) -> wireshark_connector_sptr"""
    return _foo_swig.wireshark_connector_make(type, debug)

class burst_tagger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::burst_tagger)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::burst_tagger)> self) -> burst_tagger_sptr
        __init__(boost::shared_ptr<(gr::foo::burst_tagger)> self, burst_tagger p) -> burst_tagger_sptr
        """
        this = _foo_swig.new_burst_tagger_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(burst_tagger_sptr self) -> burst_tagger"""
        return _foo_swig.burst_tagger_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_burst_tagger_sptr
    __del__ = lambda self: None

    def make(self, tag_name, mult):
        """make(burst_tagger_sptr self, swig_int_ptr tag_name, unsigned int mult) -> burst_tagger_sptr"""
        return _foo_swig.burst_tagger_sptr_make(self, tag_name, mult)


    def history(self):
        """history(burst_tagger_sptr self) -> unsigned int"""
        return _foo_swig.burst_tagger_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_tagger_sptr self, int which, int delay)
        declare_sample_delay(burst_tagger_sptr self, unsigned int delay)
        """
        return _foo_swig.burst_tagger_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(burst_tagger_sptr self, int which) -> unsigned int"""
        return _foo_swig.burst_tagger_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(burst_tagger_sptr self) -> int"""
        return _foo_swig.burst_tagger_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(burst_tagger_sptr self) -> double"""
        return _foo_swig.burst_tagger_sptr_relative_rate(self)


    def start(self):
        """start(burst_tagger_sptr self) -> bool"""
        return _foo_swig.burst_tagger_sptr_start(self)


    def stop(self):
        """stop(burst_tagger_sptr self) -> bool"""
        return _foo_swig.burst_tagger_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(burst_tagger_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.burst_tagger_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(burst_tagger_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.burst_tagger_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(burst_tagger_sptr self) -> int"""
        return _foo_swig.burst_tagger_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(burst_tagger_sptr self, int m)"""
        return _foo_swig.burst_tagger_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_tagger_sptr self)"""
        return _foo_swig.burst_tagger_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_tagger_sptr self) -> bool"""
        return _foo_swig.burst_tagger_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(burst_tagger_sptr self, int m)"""
        return _foo_swig.burst_tagger_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(burst_tagger_sptr self) -> int"""
        return _foo_swig.burst_tagger_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(burst_tagger_sptr self, int i) -> long"""
        return _foo_swig.burst_tagger_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_tagger_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_tagger_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.burst_tagger_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(burst_tagger_sptr self, int i) -> long"""
        return _foo_swig.burst_tagger_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_tagger_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_tagger_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.burst_tagger_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _foo_swig.burst_tagger_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _foo_swig.burst_tagger_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _foo_swig.burst_tagger_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _foo_swig.burst_tagger_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _foo_swig.burst_tagger_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _foo_swig.burst_tagger_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_tagger_sptr self) -> float"""
        return _foo_swig.burst_tagger_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(burst_tagger_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.burst_tagger_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_tagger_sptr self)"""
        return _foo_swig.burst_tagger_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(burst_tagger_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.burst_tagger_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(burst_tagger_sptr self) -> int"""
        return _foo_swig.burst_tagger_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(burst_tagger_sptr self) -> int"""
        return _foo_swig.burst_tagger_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(burst_tagger_sptr self, int priority) -> int"""
        return _foo_swig.burst_tagger_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(burst_tagger_sptr self) -> std::string"""
        return _foo_swig.burst_tagger_sptr_name(self)


    def symbol_name(self):
        """symbol_name(burst_tagger_sptr self) -> std::string"""
        return _foo_swig.burst_tagger_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(burst_tagger_sptr self) -> io_signature_sptr"""
        return _foo_swig.burst_tagger_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(burst_tagger_sptr self) -> io_signature_sptr"""
        return _foo_swig.burst_tagger_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(burst_tagger_sptr self) -> long"""
        return _foo_swig.burst_tagger_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(burst_tagger_sptr self) -> basic_block_sptr"""
        return _foo_swig.burst_tagger_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(burst_tagger_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.burst_tagger_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(burst_tagger_sptr self) -> std::string"""
        return _foo_swig.burst_tagger_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(burst_tagger_sptr self, std::string name)"""
        return _foo_swig.burst_tagger_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(burst_tagger_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.burst_tagger_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(burst_tagger_sptr self) -> swig_int_ptr"""
        return _foo_swig.burst_tagger_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(burst_tagger_sptr self) -> swig_int_ptr"""
        return _foo_swig.burst_tagger_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(burst_tagger_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.burst_tagger_sptr_message_subscribers(self, which_port)

burst_tagger_sptr_swigregister = _foo_swig.burst_tagger_sptr_swigregister
burst_tagger_sptr_swigregister(burst_tagger_sptr)


burst_tagger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_tagger = burst_tagger.make;

class packet_dropper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::packet_dropper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::packet_dropper)> self) -> packet_dropper_sptr
        __init__(boost::shared_ptr<(gr::foo::packet_dropper)> self, packet_dropper p) -> packet_dropper_sptr
        """
        this = _foo_swig.new_packet_dropper_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_dropper_sptr self) -> packet_dropper"""
        return _foo_swig.packet_dropper_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_packet_dropper_sptr
    __del__ = lambda self: None

    def make(self, drop_rate, seed):
        """make(packet_dropper_sptr self, double drop_rate, unsigned long seed) -> packet_dropper_sptr"""
        return _foo_swig.packet_dropper_sptr_make(self, drop_rate, seed)


    def history(self):
        """history(packet_dropper_sptr self) -> unsigned int"""
        return _foo_swig.packet_dropper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_dropper_sptr self, int which, int delay)
        declare_sample_delay(packet_dropper_sptr self, unsigned int delay)
        """
        return _foo_swig.packet_dropper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_dropper_sptr self, int which) -> unsigned int"""
        return _foo_swig.packet_dropper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_dropper_sptr self) -> int"""
        return _foo_swig.packet_dropper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_dropper_sptr self) -> double"""
        return _foo_swig.packet_dropper_sptr_relative_rate(self)


    def start(self):
        """start(packet_dropper_sptr self) -> bool"""
        return _foo_swig.packet_dropper_sptr_start(self)


    def stop(self):
        """stop(packet_dropper_sptr self) -> bool"""
        return _foo_swig.packet_dropper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_dropper_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.packet_dropper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_dropper_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.packet_dropper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_dropper_sptr self) -> int"""
        return _foo_swig.packet_dropper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_dropper_sptr self, int m)"""
        return _foo_swig.packet_dropper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_dropper_sptr self)"""
        return _foo_swig.packet_dropper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_dropper_sptr self) -> bool"""
        return _foo_swig.packet_dropper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_dropper_sptr self, int m)"""
        return _foo_swig.packet_dropper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_dropper_sptr self) -> int"""
        return _foo_swig.packet_dropper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_dropper_sptr self, int i) -> long"""
        return _foo_swig.packet_dropper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_dropper_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_dropper_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.packet_dropper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_dropper_sptr self, int i) -> long"""
        return _foo_swig.packet_dropper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_dropper_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_dropper_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.packet_dropper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_dropper_sptr self, int which) -> float
        pc_input_buffers_full(packet_dropper_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_dropper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_dropper_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_dropper_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_dropper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_dropper_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_dropper_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_dropper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_dropper_sptr self, int which) -> float
        pc_output_buffers_full(packet_dropper_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_dropper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_dropper_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_dropper_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_dropper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_dropper_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_dropper_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_dropper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_dropper_sptr self) -> float"""
        return _foo_swig.packet_dropper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_dropper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.packet_dropper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_dropper_sptr self)"""
        return _foo_swig.packet_dropper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_dropper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.packet_dropper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_dropper_sptr self) -> int"""
        return _foo_swig.packet_dropper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_dropper_sptr self) -> int"""
        return _foo_swig.packet_dropper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_dropper_sptr self, int priority) -> int"""
        return _foo_swig.packet_dropper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_dropper_sptr self) -> std::string"""
        return _foo_swig.packet_dropper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_dropper_sptr self) -> std::string"""
        return _foo_swig.packet_dropper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_dropper_sptr self) -> io_signature_sptr"""
        return _foo_swig.packet_dropper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_dropper_sptr self) -> io_signature_sptr"""
        return _foo_swig.packet_dropper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_dropper_sptr self) -> long"""
        return _foo_swig.packet_dropper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_dropper_sptr self) -> basic_block_sptr"""
        return _foo_swig.packet_dropper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_dropper_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.packet_dropper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_dropper_sptr self) -> std::string"""
        return _foo_swig.packet_dropper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_dropper_sptr self, std::string name)"""
        return _foo_swig.packet_dropper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_dropper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.packet_dropper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_dropper_sptr self) -> swig_int_ptr"""
        return _foo_swig.packet_dropper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_dropper_sptr self) -> swig_int_ptr"""
        return _foo_swig.packet_dropper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_dropper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.packet_dropper_sptr_message_subscribers(self, which_port)

packet_dropper_sptr_swigregister = _foo_swig.packet_dropper_sptr_swigregister
packet_dropper_sptr_swigregister(packet_dropper_sptr)


packet_dropper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_dropper = packet_dropper.make;

class packet_pad_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::packet_pad)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::packet_pad)> self) -> packet_pad_sptr
        __init__(boost::shared_ptr<(gr::foo::packet_pad)> self, packet_pad p) -> packet_pad_sptr
        """
        this = _foo_swig.new_packet_pad_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_pad_sptr self) -> packet_pad"""
        return _foo_swig.packet_pad_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_packet_pad_sptr
    __del__ = lambda self: None

    def make(self, debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0):
        """make(packet_pad_sptr self, bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0) -> packet_pad_sptr"""
        return _foo_swig.packet_pad_sptr_make(self, debug, delay, delay_sec, pad_front, pad_tail)


    def history(self):
        """history(packet_pad_sptr self) -> unsigned int"""
        return _foo_swig.packet_pad_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_pad_sptr self, int which, int delay)
        declare_sample_delay(packet_pad_sptr self, unsigned int delay)
        """
        return _foo_swig.packet_pad_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_pad_sptr self, int which) -> unsigned int"""
        return _foo_swig.packet_pad_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_pad_sptr self) -> int"""
        return _foo_swig.packet_pad_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_pad_sptr self) -> double"""
        return _foo_swig.packet_pad_sptr_relative_rate(self)


    def start(self):
        """start(packet_pad_sptr self) -> bool"""
        return _foo_swig.packet_pad_sptr_start(self)


    def stop(self):
        """stop(packet_pad_sptr self) -> bool"""
        return _foo_swig.packet_pad_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_pad_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.packet_pad_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_pad_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.packet_pad_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_pad_sptr self) -> int"""
        return _foo_swig.packet_pad_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_pad_sptr self, int m)"""
        return _foo_swig.packet_pad_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_pad_sptr self)"""
        return _foo_swig.packet_pad_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_pad_sptr self) -> bool"""
        return _foo_swig.packet_pad_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_pad_sptr self, int m)"""
        return _foo_swig.packet_pad_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_pad_sptr self) -> int"""
        return _foo_swig.packet_pad_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_pad_sptr self, int i) -> long"""
        return _foo_swig.packet_pad_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_pad_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_pad_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.packet_pad_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_pad_sptr self, int i) -> long"""
        return _foo_swig.packet_pad_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_pad_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_pad_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.packet_pad_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_pad_sptr self, int which) -> float
        pc_input_buffers_full(packet_pad_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_pad_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_pad_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_pad_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_pad_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_pad_sptr self, int which) -> float
        pc_output_buffers_full(packet_pad_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_pad_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_pad_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_pad_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_pad_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_pad_sptr self) -> float"""
        return _foo_swig.packet_pad_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_pad_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.packet_pad_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_pad_sptr self)"""
        return _foo_swig.packet_pad_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_pad_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.packet_pad_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_pad_sptr self) -> int"""
        return _foo_swig.packet_pad_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_pad_sptr self) -> int"""
        return _foo_swig.packet_pad_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_pad_sptr self, int priority) -> int"""
        return _foo_swig.packet_pad_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_pad_sptr self) -> std::string"""
        return _foo_swig.packet_pad_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_pad_sptr self) -> std::string"""
        return _foo_swig.packet_pad_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_pad_sptr self) -> io_signature_sptr"""
        return _foo_swig.packet_pad_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_pad_sptr self) -> io_signature_sptr"""
        return _foo_swig.packet_pad_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_pad_sptr self) -> long"""
        return _foo_swig.packet_pad_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_pad_sptr self) -> basic_block_sptr"""
        return _foo_swig.packet_pad_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_pad_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.packet_pad_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_pad_sptr self) -> std::string"""
        return _foo_swig.packet_pad_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_pad_sptr self, std::string name)"""
        return _foo_swig.packet_pad_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_pad_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.packet_pad_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_pad_sptr self) -> swig_int_ptr"""
        return _foo_swig.packet_pad_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_pad_sptr self) -> swig_int_ptr"""
        return _foo_swig.packet_pad_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_pad_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.packet_pad_sptr_message_subscribers(self, which_port)

packet_pad_sptr_swigregister = _foo_swig.packet_pad_sptr_swigregister
packet_pad_sptr_swigregister(packet_pad_sptr)


packet_pad_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_pad = packet_pad.make;

class packet_pad2_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::packet_pad2)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::packet_pad2)> self) -> packet_pad2_sptr
        __init__(boost::shared_ptr<(gr::foo::packet_pad2)> self, packet_pad2 p) -> packet_pad2_sptr
        """
        this = _foo_swig.new_packet_pad2_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_pad2_sptr self) -> packet_pad2"""
        return _foo_swig.packet_pad2_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_packet_pad2_sptr
    __del__ = lambda self: None

    def make(self, debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0):
        """make(packet_pad2_sptr self, bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0) -> packet_pad2_sptr"""
        return _foo_swig.packet_pad2_sptr_make(self, debug, delay, delay_sec, pad_front, pad_tail)


    def history(self):
        """history(packet_pad2_sptr self) -> unsigned int"""
        return _foo_swig.packet_pad2_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_pad2_sptr self, int which, int delay)
        declare_sample_delay(packet_pad2_sptr self, unsigned int delay)
        """
        return _foo_swig.packet_pad2_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_pad2_sptr self, int which) -> unsigned int"""
        return _foo_swig.packet_pad2_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_pad2_sptr self) -> int"""
        return _foo_swig.packet_pad2_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_pad2_sptr self) -> double"""
        return _foo_swig.packet_pad2_sptr_relative_rate(self)


    def start(self):
        """start(packet_pad2_sptr self) -> bool"""
        return _foo_swig.packet_pad2_sptr_start(self)


    def stop(self):
        """stop(packet_pad2_sptr self) -> bool"""
        return _foo_swig.packet_pad2_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_pad2_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.packet_pad2_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_pad2_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.packet_pad2_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_pad2_sptr self) -> int"""
        return _foo_swig.packet_pad2_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_pad2_sptr self, int m)"""
        return _foo_swig.packet_pad2_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_pad2_sptr self)"""
        return _foo_swig.packet_pad2_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_pad2_sptr self) -> bool"""
        return _foo_swig.packet_pad2_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_pad2_sptr self, int m)"""
        return _foo_swig.packet_pad2_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_pad2_sptr self) -> int"""
        return _foo_swig.packet_pad2_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_pad2_sptr self, int i) -> long"""
        return _foo_swig.packet_pad2_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_pad2_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_pad2_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.packet_pad2_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_pad2_sptr self, int i) -> long"""
        return _foo_swig.packet_pad2_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_pad2_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_pad2_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.packet_pad2_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_pad2_sptr self, int which) -> float
        pc_input_buffers_full(packet_pad2_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad2_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_pad2_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_pad2_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad2_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_pad2_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_pad2_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad2_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_pad2_sptr self, int which) -> float
        pc_output_buffers_full(packet_pad2_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad2_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_pad2_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_pad2_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad2_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_pad2_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_pad2_sptr self) -> pmt_vector_float
        """
        return _foo_swig.packet_pad2_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_pad2_sptr self) -> float"""
        return _foo_swig.packet_pad2_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_pad2_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.packet_pad2_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_pad2_sptr self)"""
        return _foo_swig.packet_pad2_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_pad2_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.packet_pad2_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_pad2_sptr self) -> int"""
        return _foo_swig.packet_pad2_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_pad2_sptr self) -> int"""
        return _foo_swig.packet_pad2_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_pad2_sptr self, int priority) -> int"""
        return _foo_swig.packet_pad2_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_pad2_sptr self) -> std::string"""
        return _foo_swig.packet_pad2_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_pad2_sptr self) -> std::string"""
        return _foo_swig.packet_pad2_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_pad2_sptr self) -> io_signature_sptr"""
        return _foo_swig.packet_pad2_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_pad2_sptr self) -> io_signature_sptr"""
        return _foo_swig.packet_pad2_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_pad2_sptr self) -> long"""
        return _foo_swig.packet_pad2_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_pad2_sptr self) -> basic_block_sptr"""
        return _foo_swig.packet_pad2_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_pad2_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.packet_pad2_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_pad2_sptr self) -> std::string"""
        return _foo_swig.packet_pad2_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_pad2_sptr self, std::string name)"""
        return _foo_swig.packet_pad2_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_pad2_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.packet_pad2_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_pad2_sptr self) -> swig_int_ptr"""
        return _foo_swig.packet_pad2_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_pad2_sptr self) -> swig_int_ptr"""
        return _foo_swig.packet_pad2_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_pad2_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.packet_pad2_sptr_message_subscribers(self, which_port)

packet_pad2_sptr_swigregister = _foo_swig.packet_pad2_sptr_swigregister
packet_pad2_sptr_swigregister(packet_pad2_sptr)


packet_pad2_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_pad2 = packet_pad2.make;

class periodic_msg_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::periodic_msg_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::periodic_msg_source)> self) -> periodic_msg_source_sptr
        __init__(boost::shared_ptr<(gr::foo::periodic_msg_source)> self, periodic_msg_source p) -> periodic_msg_source_sptr
        """
        this = _foo_swig.new_periodic_msg_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(periodic_msg_source_sptr self) -> periodic_msg_source"""
        return _foo_swig.periodic_msg_source_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_periodic_msg_source_sptr
    __del__ = lambda self: None

    def make(self, msg, interval, num_msg=-1, quit=True, debug=False):
        """make(periodic_msg_source_sptr self, swig_int_ptr msg, long interval, int num_msg=-1, bool quit=True, bool debug=False) -> periodic_msg_source_sptr"""
        return _foo_swig.periodic_msg_source_sptr_make(self, msg, interval, num_msg, quit, debug)


    def set_nmsg(self, nmsg):
        """set_nmsg(periodic_msg_source_sptr self, int nmsg)"""
        return _foo_swig.periodic_msg_source_sptr_set_nmsg(self, nmsg)


    def get_nmsg(self):
        """get_nmsg(periodic_msg_source_sptr self) -> int"""
        return _foo_swig.periodic_msg_source_sptr_get_nmsg(self)


    def set_delay(self, delay):
        """set_delay(periodic_msg_source_sptr self, long delay)"""
        return _foo_swig.periodic_msg_source_sptr_set_delay(self, delay)


    def get_delay(self):
        """get_delay(periodic_msg_source_sptr self) -> long"""
        return _foo_swig.periodic_msg_source_sptr_get_delay(self)


    def start_tx(self):
        """start_tx(periodic_msg_source_sptr self)"""
        return _foo_swig.periodic_msg_source_sptr_start_tx(self)


    def stop_tx(self):
        """stop_tx(periodic_msg_source_sptr self)"""
        return _foo_swig.periodic_msg_source_sptr_stop_tx(self)


    def is_running(self):
        """is_running(periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.periodic_msg_source_sptr_is_running(self)


    def history(self):
        """history(periodic_msg_source_sptr self) -> unsigned int"""
        return _foo_swig.periodic_msg_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(periodic_msg_source_sptr self, int which, int delay)
        declare_sample_delay(periodic_msg_source_sptr self, unsigned int delay)
        """
        return _foo_swig.periodic_msg_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(periodic_msg_source_sptr self, int which) -> unsigned int"""
        return _foo_swig.periodic_msg_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(periodic_msg_source_sptr self) -> int"""
        return _foo_swig.periodic_msg_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(periodic_msg_source_sptr self) -> double"""
        return _foo_swig.periodic_msg_source_sptr_relative_rate(self)


    def start(self):
        """start(periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.periodic_msg_source_sptr_start(self)


    def stop(self):
        """stop(periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.periodic_msg_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(periodic_msg_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.periodic_msg_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(periodic_msg_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.periodic_msg_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(periodic_msg_source_sptr self) -> int"""
        return _foo_swig.periodic_msg_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(periodic_msg_source_sptr self, int m)"""
        return _foo_swig.periodic_msg_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(periodic_msg_source_sptr self)"""
        return _foo_swig.periodic_msg_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.periodic_msg_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(periodic_msg_source_sptr self, int m)"""
        return _foo_swig.periodic_msg_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(periodic_msg_source_sptr self) -> int"""
        return _foo_swig.periodic_msg_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(periodic_msg_source_sptr self, int i) -> long"""
        return _foo_swig.periodic_msg_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(periodic_msg_source_sptr self, long max_output_buffer)
        set_max_output_buffer(periodic_msg_source_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.periodic_msg_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(periodic_msg_source_sptr self, int i) -> long"""
        return _foo_swig.periodic_msg_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(periodic_msg_source_sptr self, long min_output_buffer)
        set_min_output_buffer(periodic_msg_source_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.periodic_msg_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(periodic_msg_source_sptr self, int which) -> float
        pc_input_buffers_full(periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.periodic_msg_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(periodic_msg_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.periodic_msg_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(periodic_msg_source_sptr self, int which) -> float
        pc_input_buffers_full_var(periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.periodic_msg_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(periodic_msg_source_sptr self, int which) -> float
        pc_output_buffers_full(periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.periodic_msg_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(periodic_msg_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.periodic_msg_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(periodic_msg_source_sptr self, int which) -> float
        pc_output_buffers_full_var(periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.periodic_msg_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(periodic_msg_source_sptr self) -> float"""
        return _foo_swig.periodic_msg_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(periodic_msg_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.periodic_msg_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(periodic_msg_source_sptr self)"""
        return _foo_swig.periodic_msg_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(periodic_msg_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.periodic_msg_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(periodic_msg_source_sptr self) -> int"""
        return _foo_swig.periodic_msg_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(periodic_msg_source_sptr self) -> int"""
        return _foo_swig.periodic_msg_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(periodic_msg_source_sptr self, int priority) -> int"""
        return _foo_swig.periodic_msg_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(periodic_msg_source_sptr self) -> std::string"""
        return _foo_swig.periodic_msg_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(periodic_msg_source_sptr self) -> std::string"""
        return _foo_swig.periodic_msg_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(periodic_msg_source_sptr self) -> io_signature_sptr"""
        return _foo_swig.periodic_msg_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(periodic_msg_source_sptr self) -> io_signature_sptr"""
        return _foo_swig.periodic_msg_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(periodic_msg_source_sptr self) -> long"""
        return _foo_swig.periodic_msg_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(periodic_msg_source_sptr self) -> basic_block_sptr"""
        return _foo_swig.periodic_msg_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(periodic_msg_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.periodic_msg_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(periodic_msg_source_sptr self) -> std::string"""
        return _foo_swig.periodic_msg_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(periodic_msg_source_sptr self, std::string name)"""
        return _foo_swig.periodic_msg_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(periodic_msg_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.periodic_msg_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(periodic_msg_source_sptr self) -> swig_int_ptr"""
        return _foo_swig.periodic_msg_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(periodic_msg_source_sptr self) -> swig_int_ptr"""
        return _foo_swig.periodic_msg_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(periodic_msg_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.periodic_msg_source_sptr_message_subscribers(self, which_port)

periodic_msg_source_sptr_swigregister = _foo_swig.periodic_msg_source_sptr_swigregister
periodic_msg_source_sptr_swigregister(periodic_msg_source_sptr)


periodic_msg_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
periodic_msg_source = periodic_msg_source.make;

class random_periodic_msg_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::random_periodic_msg_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::random_periodic_msg_source)> self) -> random_periodic_msg_source_sptr
        __init__(boost::shared_ptr<(gr::foo::random_periodic_msg_source)> self, random_periodic_msg_source p) -> random_periodic_msg_source_sptr
        """
        this = _foo_swig.new_random_periodic_msg_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(random_periodic_msg_source_sptr self) -> random_periodic_msg_source"""
        return _foo_swig.random_periodic_msg_source_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_random_periodic_msg_source_sptr
    __del__ = lambda self: None

    def make(self, msg_len, interval, num_msg=1, quit=True, debug=False, seed=0):
        """make(random_periodic_msg_source_sptr self, int msg_len, long interval, int num_msg=1, bool quit=True, bool debug=False, int seed=0) -> random_periodic_msg_source_sptr"""
        return _foo_swig.random_periodic_msg_source_sptr_make(self, msg_len, interval, num_msg, quit, debug, seed)


    def set_nmsg(self, nmsg):
        """set_nmsg(random_periodic_msg_source_sptr self, int nmsg)"""
        return _foo_swig.random_periodic_msg_source_sptr_set_nmsg(self, nmsg)


    def get_nmsg(self):
        """get_nmsg(random_periodic_msg_source_sptr self) -> int"""
        return _foo_swig.random_periodic_msg_source_sptr_get_nmsg(self)


    def set_delay(self, delay):
        """set_delay(random_periodic_msg_source_sptr self, long delay)"""
        return _foo_swig.random_periodic_msg_source_sptr_set_delay(self, delay)


    def get_delay(self):
        """get_delay(random_periodic_msg_source_sptr self) -> long"""
        return _foo_swig.random_periodic_msg_source_sptr_get_delay(self)


    def start_tx(self):
        """start_tx(random_periodic_msg_source_sptr self)"""
        return _foo_swig.random_periodic_msg_source_sptr_start_tx(self)


    def stop_tx(self):
        """stop_tx(random_periodic_msg_source_sptr self)"""
        return _foo_swig.random_periodic_msg_source_sptr_stop_tx(self)


    def is_running(self):
        """is_running(random_periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.random_periodic_msg_source_sptr_is_running(self)


    def history(self):
        """history(random_periodic_msg_source_sptr self) -> unsigned int"""
        return _foo_swig.random_periodic_msg_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(random_periodic_msg_source_sptr self, int which, int delay)
        declare_sample_delay(random_periodic_msg_source_sptr self, unsigned int delay)
        """
        return _foo_swig.random_periodic_msg_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(random_periodic_msg_source_sptr self, int which) -> unsigned int"""
        return _foo_swig.random_periodic_msg_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(random_periodic_msg_source_sptr self) -> int"""
        return _foo_swig.random_periodic_msg_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(random_periodic_msg_source_sptr self) -> double"""
        return _foo_swig.random_periodic_msg_source_sptr_relative_rate(self)


    def start(self):
        """start(random_periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.random_periodic_msg_source_sptr_start(self)


    def stop(self):
        """stop(random_periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.random_periodic_msg_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(random_periodic_msg_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.random_periodic_msg_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(random_periodic_msg_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.random_periodic_msg_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(random_periodic_msg_source_sptr self) -> int"""
        return _foo_swig.random_periodic_msg_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(random_periodic_msg_source_sptr self, int m)"""
        return _foo_swig.random_periodic_msg_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(random_periodic_msg_source_sptr self)"""
        return _foo_swig.random_periodic_msg_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(random_periodic_msg_source_sptr self) -> bool"""
        return _foo_swig.random_periodic_msg_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(random_periodic_msg_source_sptr self, int m)"""
        return _foo_swig.random_periodic_msg_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(random_periodic_msg_source_sptr self) -> int"""
        return _foo_swig.random_periodic_msg_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(random_periodic_msg_source_sptr self, int i) -> long"""
        return _foo_swig.random_periodic_msg_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(random_periodic_msg_source_sptr self, long max_output_buffer)
        set_max_output_buffer(random_periodic_msg_source_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.random_periodic_msg_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(random_periodic_msg_source_sptr self, int i) -> long"""
        return _foo_swig.random_periodic_msg_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(random_periodic_msg_source_sptr self, long min_output_buffer)
        set_min_output_buffer(random_periodic_msg_source_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.random_periodic_msg_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(random_periodic_msg_source_sptr self, int which) -> float
        pc_input_buffers_full(random_periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.random_periodic_msg_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(random_periodic_msg_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(random_periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.random_periodic_msg_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(random_periodic_msg_source_sptr self, int which) -> float
        pc_input_buffers_full_var(random_periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.random_periodic_msg_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(random_periodic_msg_source_sptr self, int which) -> float
        pc_output_buffers_full(random_periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.random_periodic_msg_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(random_periodic_msg_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(random_periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.random_periodic_msg_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(random_periodic_msg_source_sptr self, int which) -> float
        pc_output_buffers_full_var(random_periodic_msg_source_sptr self) -> pmt_vector_float
        """
        return _foo_swig.random_periodic_msg_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(random_periodic_msg_source_sptr self) -> float"""
        return _foo_swig.random_periodic_msg_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(random_periodic_msg_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.random_periodic_msg_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(random_periodic_msg_source_sptr self)"""
        return _foo_swig.random_periodic_msg_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(random_periodic_msg_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.random_periodic_msg_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(random_periodic_msg_source_sptr self) -> int"""
        return _foo_swig.random_periodic_msg_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(random_periodic_msg_source_sptr self) -> int"""
        return _foo_swig.random_periodic_msg_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(random_periodic_msg_source_sptr self, int priority) -> int"""
        return _foo_swig.random_periodic_msg_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(random_periodic_msg_source_sptr self) -> std::string"""
        return _foo_swig.random_periodic_msg_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(random_periodic_msg_source_sptr self) -> std::string"""
        return _foo_swig.random_periodic_msg_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(random_periodic_msg_source_sptr self) -> io_signature_sptr"""
        return _foo_swig.random_periodic_msg_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(random_periodic_msg_source_sptr self) -> io_signature_sptr"""
        return _foo_swig.random_periodic_msg_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(random_periodic_msg_source_sptr self) -> long"""
        return _foo_swig.random_periodic_msg_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(random_periodic_msg_source_sptr self) -> basic_block_sptr"""
        return _foo_swig.random_periodic_msg_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(random_periodic_msg_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.random_periodic_msg_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(random_periodic_msg_source_sptr self) -> std::string"""
        return _foo_swig.random_periodic_msg_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(random_periodic_msg_source_sptr self, std::string name)"""
        return _foo_swig.random_periodic_msg_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(random_periodic_msg_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.random_periodic_msg_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(random_periodic_msg_source_sptr self) -> swig_int_ptr"""
        return _foo_swig.random_periodic_msg_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(random_periodic_msg_source_sptr self) -> swig_int_ptr"""
        return _foo_swig.random_periodic_msg_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(random_periodic_msg_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.random_periodic_msg_source_sptr_message_subscribers(self, which_port)

random_periodic_msg_source_sptr_swigregister = _foo_swig.random_periodic_msg_source_sptr_swigregister
random_periodic_msg_source_sptr_swigregister(random_periodic_msg_source_sptr)


random_periodic_msg_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
random_periodic_msg_source = random_periodic_msg_source.make;

class rtt_measure_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::rtt_measure)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::rtt_measure)> self) -> rtt_measure_sptr
        __init__(boost::shared_ptr<(gr::foo::rtt_measure)> self, rtt_measure p) -> rtt_measure_sptr
        """
        this = _foo_swig.new_rtt_measure_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(rtt_measure_sptr self) -> rtt_measure"""
        return _foo_swig.rtt_measure_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_rtt_measure_sptr
    __del__ = lambda self: None

    def make(self, interval):
        """make(rtt_measure_sptr self, unsigned long interval) -> rtt_measure_sptr"""
        return _foo_swig.rtt_measure_sptr_make(self, interval)


    def history(self):
        """history(rtt_measure_sptr self) -> unsigned int"""
        return _foo_swig.rtt_measure_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rtt_measure_sptr self, int which, int delay)
        declare_sample_delay(rtt_measure_sptr self, unsigned int delay)
        """
        return _foo_swig.rtt_measure_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(rtt_measure_sptr self, int which) -> unsigned int"""
        return _foo_swig.rtt_measure_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(rtt_measure_sptr self) -> int"""
        return _foo_swig.rtt_measure_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(rtt_measure_sptr self) -> double"""
        return _foo_swig.rtt_measure_sptr_relative_rate(self)


    def start(self):
        """start(rtt_measure_sptr self) -> bool"""
        return _foo_swig.rtt_measure_sptr_start(self)


    def stop(self):
        """stop(rtt_measure_sptr self) -> bool"""
        return _foo_swig.rtt_measure_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(rtt_measure_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.rtt_measure_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(rtt_measure_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.rtt_measure_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(rtt_measure_sptr self) -> int"""
        return _foo_swig.rtt_measure_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(rtt_measure_sptr self, int m)"""
        return _foo_swig.rtt_measure_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rtt_measure_sptr self)"""
        return _foo_swig.rtt_measure_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rtt_measure_sptr self) -> bool"""
        return _foo_swig.rtt_measure_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(rtt_measure_sptr self, int m)"""
        return _foo_swig.rtt_measure_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(rtt_measure_sptr self) -> int"""
        return _foo_swig.rtt_measure_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(rtt_measure_sptr self, int i) -> long"""
        return _foo_swig.rtt_measure_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rtt_measure_sptr self, long max_output_buffer)
        set_max_output_buffer(rtt_measure_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.rtt_measure_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(rtt_measure_sptr self, int i) -> long"""
        return _foo_swig.rtt_measure_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rtt_measure_sptr self, long min_output_buffer)
        set_min_output_buffer(rtt_measure_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.rtt_measure_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rtt_measure_sptr self, int which) -> float
        pc_input_buffers_full(rtt_measure_sptr self) -> pmt_vector_float
        """
        return _foo_swig.rtt_measure_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rtt_measure_sptr self, int which) -> float
        pc_input_buffers_full_avg(rtt_measure_sptr self) -> pmt_vector_float
        """
        return _foo_swig.rtt_measure_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rtt_measure_sptr self, int which) -> float
        pc_input_buffers_full_var(rtt_measure_sptr self) -> pmt_vector_float
        """
        return _foo_swig.rtt_measure_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rtt_measure_sptr self, int which) -> float
        pc_output_buffers_full(rtt_measure_sptr self) -> pmt_vector_float
        """
        return _foo_swig.rtt_measure_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rtt_measure_sptr self, int which) -> float
        pc_output_buffers_full_avg(rtt_measure_sptr self) -> pmt_vector_float
        """
        return _foo_swig.rtt_measure_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rtt_measure_sptr self, int which) -> float
        pc_output_buffers_full_var(rtt_measure_sptr self) -> pmt_vector_float
        """
        return _foo_swig.rtt_measure_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(rtt_measure_sptr self) -> float"""
        return _foo_swig.rtt_measure_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(rtt_measure_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.rtt_measure_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(rtt_measure_sptr self)"""
        return _foo_swig.rtt_measure_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(rtt_measure_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.rtt_measure_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(rtt_measure_sptr self) -> int"""
        return _foo_swig.rtt_measure_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(rtt_measure_sptr self) -> int"""
        return _foo_swig.rtt_measure_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(rtt_measure_sptr self, int priority) -> int"""
        return _foo_swig.rtt_measure_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(rtt_measure_sptr self) -> std::string"""
        return _foo_swig.rtt_measure_sptr_name(self)


    def symbol_name(self):
        """symbol_name(rtt_measure_sptr self) -> std::string"""
        return _foo_swig.rtt_measure_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(rtt_measure_sptr self) -> io_signature_sptr"""
        return _foo_swig.rtt_measure_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(rtt_measure_sptr self) -> io_signature_sptr"""
        return _foo_swig.rtt_measure_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(rtt_measure_sptr self) -> long"""
        return _foo_swig.rtt_measure_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(rtt_measure_sptr self) -> basic_block_sptr"""
        return _foo_swig.rtt_measure_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rtt_measure_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.rtt_measure_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(rtt_measure_sptr self) -> std::string"""
        return _foo_swig.rtt_measure_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(rtt_measure_sptr self, std::string name)"""
        return _foo_swig.rtt_measure_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(rtt_measure_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.rtt_measure_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(rtt_measure_sptr self) -> swig_int_ptr"""
        return _foo_swig.rtt_measure_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(rtt_measure_sptr self) -> swig_int_ptr"""
        return _foo_swig.rtt_measure_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(rtt_measure_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.rtt_measure_sptr_message_subscribers(self, which_port)

rtt_measure_sptr_swigregister = _foo_swig.rtt_measure_sptr_swigregister
rtt_measure_sptr_swigregister(rtt_measure_sptr)


rtt_measure_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rtt_measure = rtt_measure.make;

class wireshark_connector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::foo::wireshark_connector)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::foo::wireshark_connector)> self) -> wireshark_connector_sptr
        __init__(boost::shared_ptr<(gr::foo::wireshark_connector)> self, wireshark_connector p) -> wireshark_connector_sptr
        """
        this = _foo_swig.new_wireshark_connector_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(wireshark_connector_sptr self) -> wireshark_connector"""
        return _foo_swig.wireshark_connector_sptr___deref__(self)

    __swig_destroy__ = _foo_swig.delete_wireshark_connector_sptr
    __del__ = lambda self: None

    def make(self, type, debug=False):
        """make(wireshark_connector_sptr self, gr::foo::LinkType type, bool debug=False) -> wireshark_connector_sptr"""
        return _foo_swig.wireshark_connector_sptr_make(self, type, debug)


    def history(self):
        """history(wireshark_connector_sptr self) -> unsigned int"""
        return _foo_swig.wireshark_connector_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(wireshark_connector_sptr self, int which, int delay)
        declare_sample_delay(wireshark_connector_sptr self, unsigned int delay)
        """
        return _foo_swig.wireshark_connector_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(wireshark_connector_sptr self, int which) -> unsigned int"""
        return _foo_swig.wireshark_connector_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(wireshark_connector_sptr self) -> int"""
        return _foo_swig.wireshark_connector_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(wireshark_connector_sptr self) -> double"""
        return _foo_swig.wireshark_connector_sptr_relative_rate(self)


    def start(self):
        """start(wireshark_connector_sptr self) -> bool"""
        return _foo_swig.wireshark_connector_sptr_start(self)


    def stop(self):
        """stop(wireshark_connector_sptr self) -> bool"""
        return _foo_swig.wireshark_connector_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(wireshark_connector_sptr self, unsigned int which_input) -> uint64_t"""
        return _foo_swig.wireshark_connector_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(wireshark_connector_sptr self, unsigned int which_output) -> uint64_t"""
        return _foo_swig.wireshark_connector_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(wireshark_connector_sptr self) -> int"""
        return _foo_swig.wireshark_connector_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(wireshark_connector_sptr self, int m)"""
        return _foo_swig.wireshark_connector_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(wireshark_connector_sptr self)"""
        return _foo_swig.wireshark_connector_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(wireshark_connector_sptr self) -> bool"""
        return _foo_swig.wireshark_connector_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(wireshark_connector_sptr self, int m)"""
        return _foo_swig.wireshark_connector_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(wireshark_connector_sptr self) -> int"""
        return _foo_swig.wireshark_connector_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(wireshark_connector_sptr self, int i) -> long"""
        return _foo_swig.wireshark_connector_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(wireshark_connector_sptr self, long max_output_buffer)
        set_max_output_buffer(wireshark_connector_sptr self, int port, long max_output_buffer)
        """
        return _foo_swig.wireshark_connector_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(wireshark_connector_sptr self, int i) -> long"""
        return _foo_swig.wireshark_connector_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(wireshark_connector_sptr self, long min_output_buffer)
        set_min_output_buffer(wireshark_connector_sptr self, int port, long min_output_buffer)
        """
        return _foo_swig.wireshark_connector_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(wireshark_connector_sptr self, int which) -> float
        pc_input_buffers_full(wireshark_connector_sptr self) -> pmt_vector_float
        """
        return _foo_swig.wireshark_connector_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(wireshark_connector_sptr self, int which) -> float
        pc_input_buffers_full_avg(wireshark_connector_sptr self) -> pmt_vector_float
        """
        return _foo_swig.wireshark_connector_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(wireshark_connector_sptr self, int which) -> float
        pc_input_buffers_full_var(wireshark_connector_sptr self) -> pmt_vector_float
        """
        return _foo_swig.wireshark_connector_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(wireshark_connector_sptr self, int which) -> float
        pc_output_buffers_full(wireshark_connector_sptr self) -> pmt_vector_float
        """
        return _foo_swig.wireshark_connector_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(wireshark_connector_sptr self, int which) -> float
        pc_output_buffers_full_avg(wireshark_connector_sptr self) -> pmt_vector_float
        """
        return _foo_swig.wireshark_connector_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(wireshark_connector_sptr self, int which) -> float
        pc_output_buffers_full_var(wireshark_connector_sptr self) -> pmt_vector_float
        """
        return _foo_swig.wireshark_connector_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(wireshark_connector_sptr self) -> float"""
        return _foo_swig.wireshark_connector_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(wireshark_connector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _foo_swig.wireshark_connector_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(wireshark_connector_sptr self)"""
        return _foo_swig.wireshark_connector_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(wireshark_connector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _foo_swig.wireshark_connector_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(wireshark_connector_sptr self) -> int"""
        return _foo_swig.wireshark_connector_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(wireshark_connector_sptr self) -> int"""
        return _foo_swig.wireshark_connector_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(wireshark_connector_sptr self, int priority) -> int"""
        return _foo_swig.wireshark_connector_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(wireshark_connector_sptr self) -> std::string"""
        return _foo_swig.wireshark_connector_sptr_name(self)


    def symbol_name(self):
        """symbol_name(wireshark_connector_sptr self) -> std::string"""
        return _foo_swig.wireshark_connector_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(wireshark_connector_sptr self) -> io_signature_sptr"""
        return _foo_swig.wireshark_connector_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(wireshark_connector_sptr self) -> io_signature_sptr"""
        return _foo_swig.wireshark_connector_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(wireshark_connector_sptr self) -> long"""
        return _foo_swig.wireshark_connector_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(wireshark_connector_sptr self) -> basic_block_sptr"""
        return _foo_swig.wireshark_connector_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(wireshark_connector_sptr self, int ninputs, int noutputs) -> bool"""
        return _foo_swig.wireshark_connector_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(wireshark_connector_sptr self) -> std::string"""
        return _foo_swig.wireshark_connector_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(wireshark_connector_sptr self, std::string name)"""
        return _foo_swig.wireshark_connector_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(wireshark_connector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _foo_swig.wireshark_connector_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(wireshark_connector_sptr self) -> swig_int_ptr"""
        return _foo_swig.wireshark_connector_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(wireshark_connector_sptr self) -> swig_int_ptr"""
        return _foo_swig.wireshark_connector_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(wireshark_connector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _foo_swig.wireshark_connector_sptr_message_subscribers(self, which_port)

wireshark_connector_sptr_swigregister = _foo_swig.wireshark_connector_sptr_swigregister
wireshark_connector_sptr_swigregister(wireshark_connector_sptr)


wireshark_connector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
wireshark_connector = wireshark_connector.make;



