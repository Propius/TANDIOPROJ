# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hydra_swig', [dirname(__file__)])
        except ImportError:
            import _hydra_swig
            return _hydra_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_hydra_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hydra_swig = swig_import_helper()
    del swig_import_helper
else:
    import _hydra_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _hydra_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _hydra_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _hydra_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _hydra_swig.high_res_timer_epoch()
class VirtualRadio(object):
    """Proxy of C++ gr::hydra::VirtualRadio class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, hypervisor, _idx, central_frequency, bandwidth, _fft_n_len):
        """__init__(gr::hydra::VirtualRadio self, Hypervisor hypervisor, size_t _idx, double central_frequency, double bandwidth, size_t _fft_n_len) -> VirtualRadio"""
        this = _hydra_swig.new_VirtualRadio(hypervisor, _idx, central_frequency, bandwidth, _fft_n_len)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_id(self):
        """get_id(VirtualRadio self) -> int const"""
        return _hydra_swig.VirtualRadio_get_id(self)


    def get_subcarriers(self):
        """get_subcarriers(VirtualRadio self) -> size_t const"""
        return _hydra_swig.VirtualRadio_get_subcarriers(self)


    def set_subcarriers(self, n):
        """set_subcarriers(VirtualRadio self, size_t n)"""
        return _hydra_swig.VirtualRadio_set_subcarriers(self, n)


    def get_central_frequency(self):
        """get_central_frequency(VirtualRadio self) -> double const"""
        return _hydra_swig.VirtualRadio_get_central_frequency(self)


    def get_bandwidth(self):
        """get_bandwidth(VirtualRadio self) -> double const"""
        return _hydra_swig.VirtualRadio_get_bandwidth(self)


    def set_central_frequency(self, cf):
        """set_central_frequency(VirtualRadio self, double cf) -> int"""
        return _hydra_swig.VirtualRadio_set_central_frequency(self, cf)


    def set_bandwidth(self, bw):
        """set_bandwidth(VirtualRadio self, double bw)"""
        return _hydra_swig.VirtualRadio_set_bandwidth(self, bw)


    def add_sink_sample(self, samples, len):
        """add_sink_sample(VirtualRadio self, gr_complex const * samples, size_t len)"""
        return _hydra_swig.VirtualRadio_add_sink_sample(self, samples, len)


    def set_iq_mapping(self, iq_map):
        """set_iq_mapping(VirtualRadio self, gr::hydra::iq_map_vec const & iq_map)"""
        return _hydra_swig.VirtualRadio_set_iq_mapping(self, iq_map)


    def demap_iq_samples(self, samples_buf):
        """demap_iq_samples(VirtualRadio self, gr_complex const * samples_buf)"""
        return _hydra_swig.VirtualRadio_demap_iq_samples(self, samples_buf)


    def get_source_samples(self, noutput_items, samples_buff):
        """get_source_samples(VirtualRadio self, size_t noutput_items, gr_complex * samples_buff) -> size_t"""
        return _hydra_swig.VirtualRadio_get_source_samples(self, noutput_items, samples_buff)


    def map_iq_samples(self, samples_buf):
        """map_iq_samples(VirtualRadio self, gr_complex * samples_buf) -> bool"""
        return _hydra_swig.VirtualRadio_map_iq_samples(self, samples_buf)


    def ready_to_map_iq_samples(self):
        """ready_to_map_iq_samples(VirtualRadio self) -> bool const"""
        return _hydra_swig.VirtualRadio_ready_to_map_iq_samples(self)


    def ready_to_demap_iq_samples(self):
        """ready_to_demap_iq_samples(VirtualRadio self) -> bool const"""
        return _hydra_swig.VirtualRadio_ready_to_demap_iq_samples(self)

    __swig_destroy__ = _hydra_swig.delete_VirtualRadio
    __del__ = lambda self: None
VirtualRadio_swigregister = _hydra_swig.VirtualRadio_swigregister
VirtualRadio_swigregister(VirtualRadio)

class Hypervisor(object):
    """Proxy of C++ gr::hydra::Hypervisor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _fft_m_len, central_frequency, bandwidth):
        """__init__(gr::hydra::Hypervisor self, size_t _fft_m_len, double central_frequency, double bandwidth) -> Hypervisor"""
        this = _hydra_swig.new_Hypervisor(_fft_m_len, central_frequency, bandwidth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def create_vradio(self, cf, bandwidth):
        """create_vradio(Hypervisor self, double cf, double bandwidth) -> size_t"""
        return _hydra_swig.Hypervisor_create_vradio(self, cf, bandwidth)


    def get_vradio(self, idx):
        """get_vradio(Hypervisor self, size_t idx) -> VirtualRadio"""
        return _hydra_swig.Hypervisor_get_vradio(self, idx)


    def get_total_subcarriers(self):
        """get_total_subcarriers(Hypervisor self) -> size_t const"""
        return _hydra_swig.Hypervisor_get_total_subcarriers(self)


    def get_allocated_subcarriers(self):
        """get_allocated_subcarriers(Hypervisor self) -> size_t const"""
        return _hydra_swig.Hypervisor_get_allocated_subcarriers(self)


    def notify(self, vr):
        """notify(Hypervisor self, VirtualRadio vr) -> int"""
        return _hydra_swig.Hypervisor_notify(self, vr)


    def set_central_frequency(self, cf):
        """set_central_frequency(Hypervisor self, double cf)"""
        return _hydra_swig.Hypervisor_set_central_frequency(self, cf)


    def set_bandwidth(self, bw):
        """set_bandwidth(Hypervisor self, double bw)"""
        return _hydra_swig.Hypervisor_set_bandwidth(self, bw)


    def set_radio_mapping(self, *args):
        """
        set_radio_mapping(Hypervisor self)
        set_radio_mapping(Hypervisor self, VirtualRadio vr, gr::hydra::iq_map_vec & subcarriers_map) -> int
        """
        return _hydra_swig.Hypervisor_set_radio_mapping(self, *args)


    def sink_add_samples(self, noutput_items, ninput_items, input_items):
        """sink_add_samples(Hypervisor self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items)"""
        return _hydra_swig.Hypervisor_sink_add_samples(self, noutput_items, ninput_items, input_items)


    def sink_outbuf(self, output_items, max_noutput_items):
        """sink_outbuf(Hypervisor self, gr_vector_void_star & output_items, size_t max_noutput_items) -> size_t"""
        return _hydra_swig.Hypervisor_sink_outbuf(self, output_items, max_noutput_items)


    def sink_ready(self):
        """sink_ready(Hypervisor self) -> bool const"""
        return _hydra_swig.Hypervisor_sink_ready(self)


    def source_add_samples(self, nouput_items, ninput_items, input_items):
        """source_add_samples(Hypervisor self, int nouput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items) -> size_t"""
        return _hydra_swig.Hypervisor_source_add_samples(self, nouput_items, ninput_items, input_items)


    def get_source_outbuf(self, noutput_items, output_items):
        """get_source_outbuf(Hypervisor self, size_t noutput_items, gr_vector_void_star & output_items) -> gr_vector_int"""
        return _hydra_swig.Hypervisor_get_source_outbuf(self, noutput_items, output_items)


    def source_ready(self):
        """source_ready(Hypervisor self) -> bool const"""
        return _hydra_swig.Hypervisor_source_ready(self)

    __swig_destroy__ = _hydra_swig.delete_Hypervisor
    __del__ = lambda self: None
Hypervisor_swigregister = _hydra_swig.Hypervisor_swigregister
Hypervisor_swigregister(Hypervisor)

class hydra_block(object):
    """Proxy of C++ gr::hydra::hydra_block class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, n_ports, _fft_m_len, central_frequency, bandwidth):
        """__init__(gr::hydra::hydra_block self, size_t n_ports, size_t _fft_m_len, double central_frequency, double bandwidth) -> hydra_block"""
        this = _hydra_swig.new_hydra_block(n_ports, _fft_m_len, central_frequency, bandwidth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def create_vradio(self, cf, bandwidth):
        """create_vradio(hydra_block self, double cf, double bandwidth) -> size_t"""
        return _hydra_swig.hydra_block_create_vradio(self, cf, bandwidth)


    def get_hypervisor(self):
        """get_hypervisor(hydra_block self) -> Hypervisor"""
        return _hydra_swig.hydra_block_get_hypervisor(self)


    def set_central_frequency(self, vr_idx, cf):
        """set_central_frequency(hydra_block self, size_t vr_idx, float cf) -> int"""
        return _hydra_swig.hydra_block_set_central_frequency(self, vr_idx, cf)

    __swig_destroy__ = _hydra_swig.delete_hydra_block
    __del__ = lambda self: None
hydra_block_swigregister = _hydra_swig.hydra_block_swigregister
hydra_block_swigregister(hydra_block)

class hydra_sink(hydra_block):
    """Proxy of C++ gr::hydra::hydra_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
        """make(size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_sink_sptr"""
        return _hydra_swig.hydra_sink_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)

    make = staticmethod(make)

    def __init__(self, _n_inputs, _fft_m_len, central_frequency, bandwidth, vradio_conf):
        """__init__(gr::hydra::hydra_sink self, size_t _n_inputs, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradio_conf) -> hydra_sink"""
        this = _hydra_swig.new_hydra_sink(_n_inputs, _fft_m_len, central_frequency, bandwidth, vradio_conf)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hydra_swig.delete_hydra_sink
    __del__ = lambda self: None

    def forecast(self, noutput_items, ninput_items_required):
        """forecast(hydra_sink self, int noutput_items, gr_vector_int & ninput_items_required)"""
        return _hydra_swig.hydra_sink_forecast(self, noutput_items, ninput_items_required)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(hydra_sink self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _hydra_swig.hydra_sink_general_work(self, noutput_items, ninput_items, input_items, output_items)

hydra_sink_swigregister = _hydra_swig.hydra_sink_swigregister
hydra_sink_swigregister(hydra_sink)

def hydra_sink_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
    """hydra_sink_make(size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_sink_sptr"""
    return _hydra_swig.hydra_sink_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)

class hydra_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::hydra::hydra_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::hydra::hydra_sink)> self) -> hydra_sink_sptr
        __init__(boost::shared_ptr<(gr::hydra::hydra_sink)> self, hydra_sink p) -> hydra_sink_sptr
        """
        this = _hydra_swig.new_hydra_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(hydra_sink_sptr self) -> hydra_sink"""
        return _hydra_swig.hydra_sink_sptr___deref__(self)

    __swig_destroy__ = _hydra_swig.delete_hydra_sink_sptr
    __del__ = lambda self: None

    def make(self, _n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
        """make(hydra_sink_sptr self, size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_sink_sptr"""
        return _hydra_swig.hydra_sink_sptr_make(self, _n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)


    def forecast(self, noutput_items, ninput_items_required):
        """forecast(hydra_sink_sptr self, int noutput_items, gr_vector_int & ninput_items_required)"""
        return _hydra_swig.hydra_sink_sptr_forecast(self, noutput_items, ninput_items_required)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(hydra_sink_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _hydra_swig.hydra_sink_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def create_vradio(self, cf, bandwidth):
        """create_vradio(hydra_sink_sptr self, double cf, double bandwidth) -> size_t"""
        return _hydra_swig.hydra_sink_sptr_create_vradio(self, cf, bandwidth)


    def get_hypervisor(self):
        """get_hypervisor(hydra_sink_sptr self) -> Hypervisor"""
        return _hydra_swig.hydra_sink_sptr_get_hypervisor(self)


    def set_central_frequency(self, vr_idx, cf):
        """set_central_frequency(hydra_sink_sptr self, size_t vr_idx, float cf) -> int"""
        return _hydra_swig.hydra_sink_sptr_set_central_frequency(self, vr_idx, cf)


    def history(self):
        """history(hydra_sink_sptr self) -> unsigned int"""
        return _hydra_swig.hydra_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(hydra_sink_sptr self, int which, int delay)
        declare_sample_delay(hydra_sink_sptr self, unsigned int delay)
        """
        return _hydra_swig.hydra_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(hydra_sink_sptr self, int which) -> unsigned int"""
        return _hydra_swig.hydra_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(hydra_sink_sptr self) -> int"""
        return _hydra_swig.hydra_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(hydra_sink_sptr self) -> double"""
        return _hydra_swig.hydra_sink_sptr_relative_rate(self)


    def start(self):
        """start(hydra_sink_sptr self) -> bool"""
        return _hydra_swig.hydra_sink_sptr_start(self)


    def stop(self):
        """stop(hydra_sink_sptr self) -> bool"""
        return _hydra_swig.hydra_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(hydra_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _hydra_swig.hydra_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(hydra_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _hydra_swig.hydra_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(hydra_sink_sptr self) -> int"""
        return _hydra_swig.hydra_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(hydra_sink_sptr self, int m)"""
        return _hydra_swig.hydra_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(hydra_sink_sptr self)"""
        return _hydra_swig.hydra_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(hydra_sink_sptr self) -> bool"""
        return _hydra_swig.hydra_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(hydra_sink_sptr self, int m)"""
        return _hydra_swig.hydra_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(hydra_sink_sptr self) -> int"""
        return _hydra_swig.hydra_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(hydra_sink_sptr self, int i) -> long"""
        return _hydra_swig.hydra_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(hydra_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(hydra_sink_sptr self, int port, long max_output_buffer)
        """
        return _hydra_swig.hydra_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(hydra_sink_sptr self, int i) -> long"""
        return _hydra_swig.hydra_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(hydra_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(hydra_sink_sptr self, int port, long min_output_buffer)
        """
        return _hydra_swig.hydra_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(hydra_sink_sptr self, int which) -> float
        pc_input_buffers_full(hydra_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(hydra_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(hydra_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(hydra_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(hydra_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(hydra_sink_sptr self, int which) -> float
        pc_output_buffers_full(hydra_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(hydra_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(hydra_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(hydra_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(hydra_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(hydra_sink_sptr self) -> float"""
        return _hydra_swig.hydra_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(hydra_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _hydra_swig.hydra_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(hydra_sink_sptr self)"""
        return _hydra_swig.hydra_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(hydra_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _hydra_swig.hydra_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(hydra_sink_sptr self) -> int"""
        return _hydra_swig.hydra_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(hydra_sink_sptr self) -> int"""
        return _hydra_swig.hydra_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(hydra_sink_sptr self, int priority) -> int"""
        return _hydra_swig.hydra_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(hydra_sink_sptr self) -> std::string"""
        return _hydra_swig.hydra_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(hydra_sink_sptr self) -> std::string"""
        return _hydra_swig.hydra_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(hydra_sink_sptr self) -> io_signature_sptr"""
        return _hydra_swig.hydra_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(hydra_sink_sptr self) -> io_signature_sptr"""
        return _hydra_swig.hydra_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(hydra_sink_sptr self) -> long"""
        return _hydra_swig.hydra_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(hydra_sink_sptr self) -> basic_block_sptr"""
        return _hydra_swig.hydra_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(hydra_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _hydra_swig.hydra_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(hydra_sink_sptr self) -> std::string"""
        return _hydra_swig.hydra_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(hydra_sink_sptr self, std::string name)"""
        return _hydra_swig.hydra_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(hydra_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _hydra_swig.hydra_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(hydra_sink_sptr self) -> swig_int_ptr"""
        return _hydra_swig.hydra_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(hydra_sink_sptr self) -> swig_int_ptr"""
        return _hydra_swig.hydra_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(hydra_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _hydra_swig.hydra_sink_sptr_message_subscribers(self, which_port)

hydra_sink_sptr_swigregister = _hydra_swig.hydra_sink_sptr_swigregister
hydra_sink_sptr_swigregister(hydra_sink_sptr)


hydra_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hydra_sink = hydra_sink.make;

class hydra_async_sink(hydra_block):
    """Proxy of C++ gr::hydra::hydra_async_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
        """make(size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_async_sink_sptr"""
        return _hydra_swig.hydra_async_sink_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)

    make = staticmethod(make)

    def __init__(self, _n_inputs, _fft_m_len, central_frequency, bandwidth, vradio_conf):
        """__init__(gr::hydra::hydra_async_sink self, size_t _n_inputs, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradio_conf) -> hydra_async_sink"""
        this = _hydra_swig.new_hydra_async_sink(_n_inputs, _fft_m_len, central_frequency, bandwidth, vradio_conf)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hydra_swig.delete_hydra_async_sink
    __del__ = lambda self: None

    def handle_msg(self, msg, radio_id):
        """handle_msg(hydra_async_sink self, swig_int_ptr msg, size_t radio_id)"""
        return _hydra_swig.hydra_async_sink_handle_msg(self, msg, radio_id)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(hydra_async_sink self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _hydra_swig.hydra_async_sink_general_work(self, noutput_items, ninput_items, input_items, output_items)

hydra_async_sink_swigregister = _hydra_swig.hydra_async_sink_swigregister
hydra_async_sink_swigregister(hydra_async_sink)

def hydra_async_sink_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
    """hydra_async_sink_make(size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_async_sink_sptr"""
    return _hydra_swig.hydra_async_sink_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)

class hydra_async_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::hydra::hydra_async_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::hydra::hydra_async_sink)> self) -> hydra_async_sink_sptr
        __init__(boost::shared_ptr<(gr::hydra::hydra_async_sink)> self, hydra_async_sink p) -> hydra_async_sink_sptr
        """
        this = _hydra_swig.new_hydra_async_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(hydra_async_sink_sptr self) -> hydra_async_sink"""
        return _hydra_swig.hydra_async_sink_sptr___deref__(self)

    __swig_destroy__ = _hydra_swig.delete_hydra_async_sink_sptr
    __del__ = lambda self: None

    def make(self, _n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
        """make(hydra_async_sink_sptr self, size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_async_sink_sptr"""
        return _hydra_swig.hydra_async_sink_sptr_make(self, _n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)


    def handle_msg(self, msg, radio_id):
        """handle_msg(hydra_async_sink_sptr self, swig_int_ptr msg, size_t radio_id)"""
        return _hydra_swig.hydra_async_sink_sptr_handle_msg(self, msg, radio_id)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(hydra_async_sink_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def create_vradio(self, cf, bandwidth):
        """create_vradio(hydra_async_sink_sptr self, double cf, double bandwidth) -> size_t"""
        return _hydra_swig.hydra_async_sink_sptr_create_vradio(self, cf, bandwidth)


    def get_hypervisor(self):
        """get_hypervisor(hydra_async_sink_sptr self) -> Hypervisor"""
        return _hydra_swig.hydra_async_sink_sptr_get_hypervisor(self)


    def set_central_frequency(self, vr_idx, cf):
        """set_central_frequency(hydra_async_sink_sptr self, size_t vr_idx, float cf) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_set_central_frequency(self, vr_idx, cf)


    def history(self):
        """history(hydra_async_sink_sptr self) -> unsigned int"""
        return _hydra_swig.hydra_async_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(hydra_async_sink_sptr self, int which, int delay)
        declare_sample_delay(hydra_async_sink_sptr self, unsigned int delay)
        """
        return _hydra_swig.hydra_async_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(hydra_async_sink_sptr self, int which) -> unsigned int"""
        return _hydra_swig.hydra_async_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(hydra_async_sink_sptr self) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(hydra_async_sink_sptr self) -> double"""
        return _hydra_swig.hydra_async_sink_sptr_relative_rate(self)


    def start(self):
        """start(hydra_async_sink_sptr self) -> bool"""
        return _hydra_swig.hydra_async_sink_sptr_start(self)


    def stop(self):
        """stop(hydra_async_sink_sptr self) -> bool"""
        return _hydra_swig.hydra_async_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(hydra_async_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _hydra_swig.hydra_async_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(hydra_async_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _hydra_swig.hydra_async_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(hydra_async_sink_sptr self) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(hydra_async_sink_sptr self, int m)"""
        return _hydra_swig.hydra_async_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(hydra_async_sink_sptr self)"""
        return _hydra_swig.hydra_async_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(hydra_async_sink_sptr self) -> bool"""
        return _hydra_swig.hydra_async_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(hydra_async_sink_sptr self, int m)"""
        return _hydra_swig.hydra_async_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(hydra_async_sink_sptr self) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(hydra_async_sink_sptr self, int i) -> long"""
        return _hydra_swig.hydra_async_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(hydra_async_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(hydra_async_sink_sptr self, int port, long max_output_buffer)
        """
        return _hydra_swig.hydra_async_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(hydra_async_sink_sptr self, int i) -> long"""
        return _hydra_swig.hydra_async_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(hydra_async_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(hydra_async_sink_sptr self, int port, long min_output_buffer)
        """
        return _hydra_swig.hydra_async_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(hydra_async_sink_sptr self, int which) -> float
        pc_input_buffers_full(hydra_async_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_async_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(hydra_async_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(hydra_async_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_async_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(hydra_async_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(hydra_async_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_async_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(hydra_async_sink_sptr self, int which) -> float
        pc_output_buffers_full(hydra_async_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_async_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(hydra_async_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(hydra_async_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_async_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(hydra_async_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(hydra_async_sink_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_async_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(hydra_async_sink_sptr self) -> float"""
        return _hydra_swig.hydra_async_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(hydra_async_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _hydra_swig.hydra_async_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(hydra_async_sink_sptr self)"""
        return _hydra_swig.hydra_async_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(hydra_async_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _hydra_swig.hydra_async_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(hydra_async_sink_sptr self) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(hydra_async_sink_sptr self) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(hydra_async_sink_sptr self, int priority) -> int"""
        return _hydra_swig.hydra_async_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(hydra_async_sink_sptr self) -> std::string"""
        return _hydra_swig.hydra_async_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(hydra_async_sink_sptr self) -> std::string"""
        return _hydra_swig.hydra_async_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(hydra_async_sink_sptr self) -> io_signature_sptr"""
        return _hydra_swig.hydra_async_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(hydra_async_sink_sptr self) -> io_signature_sptr"""
        return _hydra_swig.hydra_async_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(hydra_async_sink_sptr self) -> long"""
        return _hydra_swig.hydra_async_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(hydra_async_sink_sptr self) -> basic_block_sptr"""
        return _hydra_swig.hydra_async_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(hydra_async_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _hydra_swig.hydra_async_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(hydra_async_sink_sptr self) -> std::string"""
        return _hydra_swig.hydra_async_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(hydra_async_sink_sptr self, std::string name)"""
        return _hydra_swig.hydra_async_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(hydra_async_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _hydra_swig.hydra_async_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(hydra_async_sink_sptr self) -> swig_int_ptr"""
        return _hydra_swig.hydra_async_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(hydra_async_sink_sptr self) -> swig_int_ptr"""
        return _hydra_swig.hydra_async_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(hydra_async_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _hydra_swig.hydra_async_sink_sptr_message_subscribers(self, which_port)

hydra_async_sink_sptr_swigregister = _hydra_swig.hydra_async_sink_sptr_swigregister
hydra_async_sink_sptr_swigregister(hydra_async_sink_sptr)


hydra_async_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hydra_async_sink = hydra_async_sink.make;

class hydra_source(hydra_block):
    """Proxy of C++ gr::hydra::hydra_source class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
        """make(size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_source_sptr"""
        return _hydra_swig.hydra_source_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)

    make = staticmethod(make)

    def __init__(self, _n_inputs, _fft_m_len, central_frequency, bandwidth, vradio_conf):
        """__init__(gr::hydra::hydra_source self, size_t _n_inputs, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradio_conf) -> hydra_source"""
        this = _hydra_swig.new_hydra_source(_n_inputs, _fft_m_len, central_frequency, bandwidth, vradio_conf)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hydra_swig.delete_hydra_source
    __del__ = lambda self: None

    def forecast(self, noutput_items, ninput_items_required):
        """forecast(hydra_source self, int noutput_items, gr_vector_int & ninput_items_required)"""
        return _hydra_swig.hydra_source_forecast(self, noutput_items, ninput_items_required)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(hydra_source self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _hydra_swig.hydra_source_general_work(self, noutput_items, ninput_items, input_items, output_items)

hydra_source_swigregister = _hydra_swig.hydra_source_swigregister
hydra_source_swigregister(hydra_source)

def hydra_source_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
    """hydra_source_make(size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_source_sptr"""
    return _hydra_swig.hydra_source_make(_n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)

class hydra_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::hydra::hydra_source)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::hydra::hydra_source)> self) -> hydra_source_sptr
        __init__(boost::shared_ptr<(gr::hydra::hydra_source)> self, hydra_source p) -> hydra_source_sptr
        """
        this = _hydra_swig.new_hydra_source_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(hydra_source_sptr self) -> hydra_source"""
        return _hydra_swig.hydra_source_sptr___deref__(self)

    __swig_destroy__ = _hydra_swig.delete_hydra_source_sptr
    __del__ = lambda self: None

    def make(self, _n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config):
        """make(hydra_source_sptr self, size_t _n_ports, size_t _fft_m_len, double central_frequency, double bandwidth, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const vradios_config) -> hydra_source_sptr"""
        return _hydra_swig.hydra_source_sptr_make(self, _n_ports, _fft_m_len, central_frequency, bandwidth, vradios_config)


    def forecast(self, noutput_items, ninput_items_required):
        """forecast(hydra_source_sptr self, int noutput_items, gr_vector_int & ninput_items_required)"""
        return _hydra_swig.hydra_source_sptr_forecast(self, noutput_items, ninput_items_required)


    def general_work(self, noutput_items, ninput_items, input_items, output_items):
        """general_work(hydra_source_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, gr_vector_void_star & output_items) -> int"""
        return _hydra_swig.hydra_source_sptr_general_work(self, noutput_items, ninput_items, input_items, output_items)


    def create_vradio(self, cf, bandwidth):
        """create_vradio(hydra_source_sptr self, double cf, double bandwidth) -> size_t"""
        return _hydra_swig.hydra_source_sptr_create_vradio(self, cf, bandwidth)


    def get_hypervisor(self):
        """get_hypervisor(hydra_source_sptr self) -> Hypervisor"""
        return _hydra_swig.hydra_source_sptr_get_hypervisor(self)


    def set_central_frequency(self, vr_idx, cf):
        """set_central_frequency(hydra_source_sptr self, size_t vr_idx, float cf) -> int"""
        return _hydra_swig.hydra_source_sptr_set_central_frequency(self, vr_idx, cf)


    def history(self):
        """history(hydra_source_sptr self) -> unsigned int"""
        return _hydra_swig.hydra_source_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(hydra_source_sptr self, int which, int delay)
        declare_sample_delay(hydra_source_sptr self, unsigned int delay)
        """
        return _hydra_swig.hydra_source_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(hydra_source_sptr self, int which) -> unsigned int"""
        return _hydra_swig.hydra_source_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(hydra_source_sptr self) -> int"""
        return _hydra_swig.hydra_source_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(hydra_source_sptr self) -> double"""
        return _hydra_swig.hydra_source_sptr_relative_rate(self)


    def start(self):
        """start(hydra_source_sptr self) -> bool"""
        return _hydra_swig.hydra_source_sptr_start(self)


    def stop(self):
        """stop(hydra_source_sptr self) -> bool"""
        return _hydra_swig.hydra_source_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(hydra_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _hydra_swig.hydra_source_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(hydra_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _hydra_swig.hydra_source_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(hydra_source_sptr self) -> int"""
        return _hydra_swig.hydra_source_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(hydra_source_sptr self, int m)"""
        return _hydra_swig.hydra_source_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(hydra_source_sptr self)"""
        return _hydra_swig.hydra_source_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(hydra_source_sptr self) -> bool"""
        return _hydra_swig.hydra_source_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(hydra_source_sptr self, int m)"""
        return _hydra_swig.hydra_source_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(hydra_source_sptr self) -> int"""
        return _hydra_swig.hydra_source_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(hydra_source_sptr self, int i) -> long"""
        return _hydra_swig.hydra_source_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(hydra_source_sptr self, long max_output_buffer)
        set_max_output_buffer(hydra_source_sptr self, int port, long max_output_buffer)
        """
        return _hydra_swig.hydra_source_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(hydra_source_sptr self, int i) -> long"""
        return _hydra_swig.hydra_source_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(hydra_source_sptr self, long min_output_buffer)
        set_min_output_buffer(hydra_source_sptr self, int port, long min_output_buffer)
        """
        return _hydra_swig.hydra_source_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(hydra_source_sptr self, int which) -> float
        pc_input_buffers_full(hydra_source_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_source_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(hydra_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(hydra_source_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_source_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(hydra_source_sptr self, int which) -> float
        pc_input_buffers_full_var(hydra_source_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_source_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(hydra_source_sptr self, int which) -> float
        pc_output_buffers_full(hydra_source_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_source_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(hydra_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(hydra_source_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_source_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(hydra_source_sptr self, int which) -> float
        pc_output_buffers_full_var(hydra_source_sptr self) -> pmt_vector_float
        """
        return _hydra_swig.hydra_source_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(hydra_source_sptr self) -> float"""
        return _hydra_swig.hydra_source_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(hydra_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _hydra_swig.hydra_source_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(hydra_source_sptr self)"""
        return _hydra_swig.hydra_source_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(hydra_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _hydra_swig.hydra_source_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(hydra_source_sptr self) -> int"""
        return _hydra_swig.hydra_source_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(hydra_source_sptr self) -> int"""
        return _hydra_swig.hydra_source_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(hydra_source_sptr self, int priority) -> int"""
        return _hydra_swig.hydra_source_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(hydra_source_sptr self) -> std::string"""
        return _hydra_swig.hydra_source_sptr_name(self)


    def symbol_name(self):
        """symbol_name(hydra_source_sptr self) -> std::string"""
        return _hydra_swig.hydra_source_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(hydra_source_sptr self) -> io_signature_sptr"""
        return _hydra_swig.hydra_source_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(hydra_source_sptr self) -> io_signature_sptr"""
        return _hydra_swig.hydra_source_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(hydra_source_sptr self) -> long"""
        return _hydra_swig.hydra_source_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(hydra_source_sptr self) -> basic_block_sptr"""
        return _hydra_swig.hydra_source_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(hydra_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _hydra_swig.hydra_source_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(hydra_source_sptr self) -> std::string"""
        return _hydra_swig.hydra_source_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(hydra_source_sptr self, std::string name)"""
        return _hydra_swig.hydra_source_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(hydra_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _hydra_swig.hydra_source_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(hydra_source_sptr self) -> swig_int_ptr"""
        return _hydra_swig.hydra_source_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(hydra_source_sptr self) -> swig_int_ptr"""
        return _hydra_swig.hydra_source_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(hydra_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _hydra_swig.hydra_source_sptr_message_subscribers(self, which_port)

hydra_source_sptr_swigregister = _hydra_swig.hydra_source_sptr_swigregister
hydra_source_sptr_swigregister(hydra_source_sptr)


hydra_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hydra_source = hydra_source.make;



